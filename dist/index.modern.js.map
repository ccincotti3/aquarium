{"version":3,"file":"index.modern.js","sources":["../src/models/species.js","../src/models/marlin.js","../src/models/fish.js","../src/models/shark.js","../src/models/stingray.js","../src/index.js","../src/shaders.js"],"sourcesContent":["import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport * as THREE from 'three/build/three.module';\n\nconst loader = new GLTFLoader().setPath('')\n\nexport default class Species {\n    constructor(pos, name, color, metadata) {\n        this.rotationThreshold = 0.0\n        this.rotationTurnFactor = 0.01\n        this.loader = loader\n        this.modelName = name;\n        this.color = color;\n        this.metadata = metadata;\n        this.position = pos || { x: 0, y: 0, z: 0, }\n        this.direction = { // 1 for positive, -1 for negative\n            x: 0,\n            y: 0,\n            z: 1,\n        }\n\n        this.lastMagnitude = 0\n    }\n\n    get boxHelper() {\n        return this.mesh.children.find(c => {\n            return c.type === \"BoxHelper\"\n        })\n    }\n\n    move() {\n            if (!this.loaded) {\n                this.loaded = true;\n                return null;\n            }\n            let vector = new THREE.Vector3()\n            this.mesh.getWorldPosition(vector);\n\n            const magnitude = Math.sqrt(vector.x**2 + vector.y**2 + vector.z**2)\n\n            const vectorToRotate = {}\n\n\n            Object.keys(this.direction).forEach((k) => {\n                    vectorToRotate[k] = Math.abs(vector[k])\n            })\n\n            let max;\n            Object.keys(vectorToRotate).forEach(k => {\n                max = vectorToRotate[max] > vectorToRotate[k] ? max : k\n            })\n\n            const directionToRotationAxis = {\n                'x': 'y',\n                'y': 'x',\n                'z': 'y'\n            }\n            if (magnitude > this.lastMagnitude) {\n                const dir = directionToRotationAxis[max]\n                const turnVel = .0006 * vectorToRotate[max]\n                this.mesh.rotation.x += this.mesh.rotation.x < 0 ? 0.001 : -0.001\n                this.mesh.rotation.y += this.mesh.rotation.y < 0 ? 0.001 : -0.001\n                this.mesh.rotation.z += this.mesh.rotation.z < 0 ? 0.001 : -0.001\n                this.mesh.rotation[dir] +=  dir === \"x\" && this.mesh.position.y < 0 ? -turnVel : turnVel\n            }\n\n            this.lastMagnitude = magnitude\n\n            if (this.mesh.rotation.x < -Math.PI / 2)  {\n                this.mesh.rotation.x = -Math.PI / 2\n            }\n\n            if (this.mesh.rotation.x > Math.PI / 2)  {\n                this.mesh.rotation.x = Math.PI / 2\n            }\n\n            this.mesh.translateX(this.velocity * this.direction.x)\n            this.mesh.translateY(this.velocity * this.direction.y)\n            this.mesh.translateZ(this.velocity * this.direction.z)\n \n        }\n\n    load(cb, errCb) {\n        if(!this.modelName) {\n            throw new Error(\"Please set a file name to load the 3D model\")\n        }\n        this.loader.load(this.modelName, (gltf) => cb(gltf, this), undefined, errCb)\n    }\n}","import Species from \"./species.js\"\n\nconst modelPath = require(\"3d-aquarium/static/models/marlin.glb\")\nexport default class Marlin extends Species {\n    constructor(pos, name, color, metadata) {\n        super()\n        this.color = color;\n        this.metadata = metadata;\n        this.modelName = modelPath\n        this.name = name || 'Marlin'\n        this.position = {\n            x: pos.x,\n            y: pos.y,\n            z: pos.z\n        }\n        this.velocity = 0.003\n        this.loaded = false\n    }\n}","import Species from \"./species.js\"\n\nconst modelPath = require(\"3d-aquarium/static/models/fish.glb\")\n\nexport default class Fish extends Species {\n    constructor(pos, name, color, metadata) {\n        super()\n        this.metadata = metadata;\n        this.modelName = modelPath\n        this.name = name || 'Fish'\n        this.color = color\n        this.position = {\n            x: pos.x,\n            y: pos.y,\n            z: pos.z\n        }\n        this.velocity = 0.005\n        this.rotationTurnFactor = 0.01\n        this.loaded = false\n    }\n}","import Species from \"./species.js\"\n\nconst modelPath = require(\"3d-aquarium/static/models/shark.glb\")\nexport default class Shark extends Species {\n    constructor(pos, name, color, metadata) {\n        super()\n        this.modelName = modelPath\n        this.name = name || 'Shark'\n        this.position = {\n            x: pos.x,\n            y: pos.y,\n            z: pos.z\n        }\n        this.velocity = .0115\n        this.loaded = false\n        this.color = color\n        this.metadata = metadata\n        this.direction = { // 1 for positive, 0 for negative\n            x: 0,\n            y: 0,\n            z: 1,\n        }\n    }\n}","import Species from \"./species.js\"\n\nconst modelPath = require(\"3d-aquarium/static/models/stingray.glb\")\nexport default class Stingray extends Species {\n    constructor(pos, name, color, metadata) {\n        super()\n        this.color = color;\n        this.metadata = metadata;\n        this.modelName = modelPath\n        this.name = name || 'Stingray'\n        this.position = {\n            x: pos.x,\n            y: pos.y,\n            z: pos.z\n        }\n        this.velocity = 0.01\n        this.loaded = false\n    }\n}","import * as THREE from 'three/build/three.module';\nimport { RectAreaLightHelper } from 'three/examples/jsm/helpers/RectAreaLightHelper';\nimport Marlin from './models/marlin.js';\nimport Fish from './models/fish.js';\nimport Shark from './models/shark.js';\nimport Stingray from './models/stingray.js';\nimport { lightShader, vertexShader } from \"./shaders.js\"\n\nconst spritePath = require(\"../static/assets/sprite.png\")\n\nclass Aquarium {\n    constructor(props) {\n        this.container = document.createElement('div')\n        this.container.classList.add('canvas-container');\n        this.container.style.height = \"100%\";\n        document.body.appendChild(this.container);\n\n        this.clock = new THREE.Clock();\n        this.mixers = [] // to hold animation mixers\n        this.fisheys = []\n        this.selectedFish;\n\n        //shader uniforms\n        this.uniforms = {\n            iTime: { value: 0 },\n            iResolution:  { value: new THREE.Vector3() },\n        }\n\n        this.debug = props.debug\n        this.nodes = props.nodes\n        this.onClick = props.onClick\n\n        this.init()\n    }\n    init() {\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n\n        this.scene = new THREE.Scene();\n        this.scene.fog = new THREE.FogExp2(0x1c3c4a, 0.05);\n\n        this.camera = new THREE.PerspectiveCamera(45, width / height, 1, 2000);\n        this.camera.position.set(0, 0, 20);\n        this.camera.lookAt(0, 0, 0);\n        window.addEventListener( 'resize', this.onWindowResize );\n\n        const ambient = new THREE.AmbientLight( 0x707070, 7); // soft white light\n        this.scene.add( ambient )\n\n        var recWidth = 30;\n        var recHeight = 30;\n        var intensity = 1;\n        var rectLight = new THREE.RectAreaLight( 0xffffff, intensity,  recWidth, recHeight );\n        rectLight.position.set( 0, 50, 0 );\n        rectLight.lookAt( 0, 0, 0 );\n        this.scene.add( rectLight )\n\n        //Shader over scene - light shader\n        const lightShaderMaterial = new THREE.ShaderMaterial({\n            fragmentShader: lightShader,\n            vertexShader: vertexShader,\n            uniforms: this.uniforms,\n            depthWrite: false,\n            depthTest: false,\n            transparent: true,\n            // alphaTest: 0.5,\n        })\n\n        const quad = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2, 2 ), lightShaderMaterial );\n        this.scene.add(quad);\n\n        // Add Renderer\n        this.renderer = new THREE.WebGLRenderer({antialias: true, alpha: true});\n        this.renderer.setClearColor(0x1c3c4a, 0.3)\n        this.renderer.setSize(width, height)\n        this.container.appendChild(this.renderer.domElement)\n\n        if(this.debug){\n            const axesHelper = new THREE.AxesHelper( 20 );\n            const camerahelper = new THREE.CameraHelper( this.camera );\n            const rectLightHelper = new RectAreaLightHelper( rectLight );\n            rectLight.add( rectLightHelper );\n            this.scene.add( camerahelper );\n            this.scene.add( axesHelper );\n        }\n\n        this.loadModels();\n        this.loadInteractiveStuff();\n        requestAnimationFrame(() => this.draw());\n    }\n    draw() {\n        requestAnimationFrame( () => this.draw() )\n        const delta = this.clock.getDelta();\n        this.uniforms.iResolution.value.set(window.innerWidth, window.innerHeight, 1);\n        this.uniforms.iTime.value += delta;\n        if ( this.mixers.length ) { \n            this.mixers.forEach(m => m.update(delta))\n        };\n        if ( this.fisheys.length ) {\n            this.fisheys.forEach(f => f.move())\n        }\n        if(this.pGroup){\n            if(this.pGroup.position.y > 350) {\n                this.pGroup.position.y = -100\n            }\n            this.pGroup.position.y += .1\n        }\n\n        this.handleSelectedFish()\n\n        this.renderer.render(this.scene, this.camera)\n    }\n    loadModels() {\n        const loadCallback = (gltf, object) => {\n            const mixer = new THREE.AnimationMixer(gltf.scene);\n            const clips = gltf.animations\n\n            // Play all animations\n            clips.forEach(( clip ) => mixer.clipAction( clip ).play());\n\n            // Append to mixers\n            this.mixers.push(mixer)\n\n            const box = new THREE.BoxHelper( gltf.scene, 0xffff00 );\n\n            gltf.scene.position.set(object.position.x, object.position.y, object.position.z)\n            if (this.debug) {\n                const axesHelper = new THREE.AxesHelper( 2 );\n                gltf.scene.add(axesHelper)\n            }\n\n            gltf.scene.traverse((o) => {\n                if (o.isMesh) { \n                    o.castShadow = true\n                    o.name = object.name\n                    if(object.color) {\n                        const mesh = new THREE.MeshStandardMaterial({color: object.color});\n                        o.material = mesh\n                    }\n                }\n            });\n            object.mesh = gltf.scene\n\n\n            box.name = object.name\n            box.visible = false;\n            object.mesh.add( box );\n\n            this.fisheys.push(object)\n            this.scene.add( object.mesh );\n        }\n        \n        const errorCallback = (e) => console.log(e)\n        this.nodes.forEach(n => {\n            const initParams = [\n                {x: n.position[0], y: n.position[1], z: n.position[2]}, n.name, n.color, n.metadata\n            ]\n            switch (n.type) {\n                case \"Goldfish\":\n                    return new Fish(...initParams).load(loadCallback, errorCallback);\n                case \"Shark\":\n                    return new Shark(...initParams).load(loadCallback, errorCallback);\n                case \"Stingray\":\n                    return new Stingray(...initParams).load(loadCallback, errorCallback);\n                case \"Marlin\":\n                    return new Marlin(...initParams).load(loadCallback, errorCallback);\n                default:\n                    break;\n            }\n        })\n\n        if (this.debug) {\n            new Fish({x: -3, y: -4, z: 0}, \"Fish 2\").load(loadCallback, errorCallback);\n            new Fish({x: 3, y: -8, z: 0}, \"Fish 3\").load(loadCallback, errorCallback);\n            new Fish({x: 8, y: -4, z: 0}, \"Fish 4\").load(loadCallback, errorCallback);\n            new Fish({x: 0, y: 0, z: 0}, \"Fish 5\").load(loadCallback, errorCallback);\n            new Shark({x: 2, y: 1, z: 0}, \"Shark\").load(loadCallback, errorCallback);\n            new Stingray({x: -2, y: 1, z: 0}, \"Stingray\").load(loadCallback, errorCallback);\n            new Marlin({x: -2, y: 1, z: -5}, \"Marlin\").load(loadCallback, errorCallback);\n        }\n\n        // Bubbles\n        const pGeometry = new THREE.Geometry();\n        const pGroup = new THREE.Object3D();\n        this.pGroup = pGroup\n        this.scene.add(pGroup)\n\n        const tL = new THREE.TextureLoader()\n        const sprite = tL.load(spritePath);\n        for (let i = 0; i < 1400; i++) {\n            var vertex = new THREE.Vector3();\n            vertex.x = 4000 * Math.random() - 2000;\n            vertex.y = -500 + Math.random() * 700;\n            vertex.z = 1200 * Math.random() - 500;\n            pGeometry.vertices.push(vertex);\n        }\n        const material = new THREE.PointsMaterial({\n            size: 10,\n            map: sprite,\n            transparent: true,\n            opacity: 1.0,\n            blending: THREE.AdditiveBlending,\n            alphaTest: 0.5\n        });\n\n        const particles = new THREE.Points(pGeometry, material);\n        particles.sortParticles = true;\n        pGroup.add(particles);\n    }\n\n    onWindowResize = () => {\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n\n        this.renderer.setSize( window.innerWidth, window.innerHeight );\n    }\n\n    onMouseMove = ( event ) => {\n            // calculate mouse position in normalized device coordinates\n            event.preventDefault();\n\n            // (-1 to +1) for both components\n            const rect = this.renderer.domElement.getBoundingClientRect();\n            this.mouse.x = ( ( event.clientX - rect.left ) / rect.width ) * 2 - 1;\n            this.mouse.y = - ( ( event.clientY - rect.top ) / rect.height ) * 2 + 1;\n            // this.mouse.x = ( event.offsetX / this.renderer.domElement.width ) * 2 - 1;\n            // this.mouse.y = -( event.offsetY / this.renderer.domElement.height ) * 2 + 1;\n\n            this.raycaster.setFromCamera( this.mouse, this.camera );\n        \n\n            const meshes = this.fisheys.map(m => m.mesh)\n            const intersects = this.raycaster.intersectObjects( meshes, true );\n            const bodyElement = document.querySelector('body');\n            if(intersects.length) {\n                const fish = this.fisheys.find(f => f.name === intersects[0].object.name);\n                bodyElement.style.cursor = \"pointer\"\n                return this.selectedFish = fish\n            }\n\n            bodyElement.style.cursor = \"unset\"\n            return this.selectedFish = null\n    }\n\n    onMouseDown = ( event, cb ) => {\n        event.preventDefault();\n\n        if(event.target instanceof HTMLCanvasElement === false) {\n            return null;\n        }\n        cb(this.selectedFish)\n    }\n\n    handleSelectedFish() {\n        const domEl = document.getElementById(\"selected\")\n        this.fisheys.forEach(f => f.boxHelper.visible = false)\n        if(!this.selectedFish) {\n            domEl.innerHTML = ''\n            return null\n        }\n        domEl.innerHTML = this.selectedFish.name \n\n        this.selectedFish.boxHelper.visible = true\n    }\n\n    loadInteractiveStuff = () => {\n        this.raycaster = new THREE.Raycaster();\n        this.mouse = new THREE.Vector2();\n       \n        window.addEventListener( 'mousemove', this.onMouseMove, false );\n        window.addEventListener( 'mousedown', (e) => this.onMouseDown(e, this.onClick), false );\n    }\n}\n\nwindow.Aquarium = Aquarium\nexport default Aquarium","// Need this for the quad trick to make full screen\nexport const vertexShader = `\n  varying vec2 vUv;\n\n  void main() {\n    vUv = uv;\n    gl_Position = vec4(position, 1.0);\n  }\n`\n\n// based off of https://www.shadertoy.com/view/MdSyDz\nexport const lightShader = `\nuniform vec3 iResolution;\nuniform float iTime;\n\nfloat rayStrength(vec2 raySource, vec2 rayRefDirection, vec2 coord, float seedA, float seedB, float speed)\n{\n\tvec2 sourceToCoord = coord - raySource;\n\tfloat cosAngle = dot(normalize(sourceToCoord), rayRefDirection);\n\t\n\treturn clamp(\n\t\t(0.45 + 0.15 * sin(cosAngle * seedA + iTime * speed)) +\n\t\t(0.3 + 0.2 * cos(-cosAngle * seedB + iTime * speed)),\n\t\t0.0, 1.0) *\n\t\tclamp((iResolution.x - length(sourceToCoord)) / iResolution.x, 0.5, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv.y = 1.0 - uv.y;\n\tvec2 coord = vec2(fragCoord.x, iResolution.y - fragCoord.y);\n\t\n\t\n\t// Set the parameters of the sun rays\n\tvec2 rayPos1 = vec2(iResolution.x * 0.7, iResolution.y * -0.4);\n\tvec2 rayRefDir1 = normalize(vec2(1.0, -0.116));\n\tfloat raySeedA1 = 36.2214;\n\tfloat raySeedB1 = 21.11349;\n\tfloat raySpeed1 = 1.5;\n\t\n\tvec2 rayPos2 = vec2(iResolution.x * 0.8, iResolution.y * -0.6);\n\tvec2 rayRefDir2 = normalize(vec2(1.0, 0.241));\n\tconst float raySeedA2 = 22.39910;\n\tconst float raySeedB2 = 18.0234;\n\tconst float raySpeed2 = 1.1;\n\t\n\t// Calculate the colour of the sun rays on the current fragment\n\tvec4 rays1 =\n\t\tvec4(1.0, 1.0, 1.0, 1.0) *\n\t\trayStrength(rayPos1, rayRefDir1, coord, raySeedA1, raySeedB1, raySpeed1);\n\t \n\tvec4 rays2 =\n\t\tvec4(1.0, 1.0, 1.0, 1.0) *\n\t\trayStrength(rayPos2, rayRefDir2, coord, raySeedA2, raySeedB2, raySpeed2);\n\t\n\tfragColor = rays1 * 0.5 + rays2 * 0.4;\n\t\n\t// Attenuate brightness towards the bottom, simulating light-loss due to depth.\n\t// Give the whole thing a blue-green tinge as well.\n\tfloat brightness = 0.1 - (coord.y / iResolution.y);\n\tfragColor.x *= 0.1 + (brightness * 0.8);\n\tfragColor.y *= 0.3 + (brightness * 0.6);\n\tfragColor.z *= 0.5 + (brightness * 0.5);\n    \n    fragColor;\n}\n\nvoid main() {\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}\n`"],"names":["loader","GLTFLoader","setPath","Species","constructor","pos","name","color","metadata","this","rotationThreshold","rotationTurnFactor","modelName","position","x","y","z","direction","lastMagnitude","boxHelper","mesh","children","find","c","type","move","loaded","vector","THREE","getWorldPosition","magnitude","Math","sqrt","vectorToRotate","max","Object","keys","forEach","k","abs","dir","turnVel","rotation","PI","translateX","velocity","translateY","translateZ","load","cb","errCb","Error","gltf","undefined","modelPath","require","Marlin","super","Fish","Shark","Stingray","spritePath","Aquarium","props","onWindowResize","camera","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","renderer","setSize","onMouseMove","event","preventDefault","rect","domElement","getBoundingClientRect","mouse","clientX","left","width","clientY","top","height","raycaster","setFromCamera","meshes","fisheys","map","m","intersects","intersectObjects","bodyElement","document","querySelector","length","fish","f","object","style","cursor","selectedFish","onMouseDown","target","HTMLCanvasElement","loadInteractiveStuff","addEventListener","e","onClick","container","createElement","classList","add","body","appendChild","clock","mixers","uniforms","iTime","value","iResolution","debug","nodes","init","scene","fog","set","lookAt","ambient","rectLight","lightShaderMaterial","fragmentShader","vertexShader","depthWrite","depthTest","transparent","quad","antialias","alpha","setClearColor","axesHelper","camerahelper","rectLightHelper","RectAreaLightHelper","loadModels","requestAnimationFrame","draw","delta","getDelta","update","pGroup","handleSelectedFish","render","loadCallback","mixer","animations","clip","clipAction","play","push","box","traverse","o","isMesh","castShadow","material","visible","errorCallback","console","log","n","initParams","pGeometry","sprite","i","vertex","random","vertices","size","opacity","blending","alphaTest","particles","sortParticles","domEl","getElementById","innerHTML"],"mappings":"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"}